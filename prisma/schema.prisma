generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime               @default(now())
  hashedPassword        String?
  updatedAt             DateTime               @updatedAt
  acceptedCollaboration Boolean?
  isEnabled             Boolean                @default(false)
  role                  String                 @default("user")
  conversations         ConversationsOnUsers[]
  seenMessages          UsersSeenOnMessages[]
  accounts              Account[]
  messages              Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Conversation {
  id            String                 @id @default(cuid())
  createdAt     DateTime               @default(now())
  lastMessageAt DateTime               @default(now())
  name          String?
  isGroup       Boolean?
  messages      Message[]
  users         ConversationsOnUsers[]
}

model Message {
  id             String                @id @default(cuid())
  body           String?
  image          String?
  createdAt      DateTime              @default(now())
  conversationId String
  senderId       String
  seenUsers      UsersSeenOnMessages[]
  conversation   Conversation          @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User                  @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

model ConversationsOnUsers {
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model UsersSeenOnMessages {
  userId    String
  messageId String
  user      User    @relation(fields: [userId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
  @@index([userId])
  @@index([messageId])
}
